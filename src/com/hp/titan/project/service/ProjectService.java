package com.hp.titan.project.service;

import java.io.IOException;
import java.util.List;
import java.util.Set;

import com.hp.app.exception.BaseDaoException;
import com.hp.app.exception.BaseException;
import com.hp.titan.common.vo.DefectVo;
import com.hp.titan.common.vo.SprintCommonVo;
import com.hp.titan.common.vo.UserstoryVo;
import com.hp.titan.mytitan.model.CommitPath;
import com.hp.titan.mytitan.model.CommitReport;
import com.hp.titan.mytitan.model.ProjectRallyQuix;
import com.hp.titan.mytitan.model.Reportary;
import com.hp.titan.mytitan.model.UserstoryInfo;
import com.hp.titan.mytitan.vo.CodeReportVo;
import com.hp.titan.mytitan.vo.MyCommitVo;
import com.hp.titan.project.model.CommitusDefect;
import com.hp.titan.project.model.DedicatedServer;
import com.hp.titan.project.model.Project;
import com.hp.titan.project.model.ProjectModule;
import com.hp.titan.test.model.ParameterData;

public interface ProjectService {
	public List<Project> getAllProjectList() throws BaseDaoException;
	public List<Project> getProjectByGroup(Integer groupId)throws BaseDaoException;
	public void saveProject(Project project) throws BaseDaoException;
	public Project getProjectById(String projectId) throws BaseDaoException;
	public void deleteProjectList(String projectIdAry) throws BaseException;
	public Boolean isExistProject(String projectName) throws BaseDaoException;
	public void saveProjectModules(List<ProjectModule> moduleList) throws BaseException;
	public void saveDedicatedServers(List<DedicatedServer> serverList) throws BaseException;
	public List<ProjectModule> getProjectModuleList(String projectId) throws BaseException;
	public List<DedicatedServer> getDedicatedServerList(String projectId) throws BaseException;
	public void deleteModulesByProjectId(String projectId) throws BaseException;
	public void deleteDedicatedServersByProjectId(String projectId) throws BaseException;
	public void deleteModule(ProjectModule module) throws BaseException;
	public void deleteDedicatedServer(DedicatedServer server) throws BaseException;
	public DedicatedServer getDedicatedServerById(String dedicatedServerId) throws BaseDaoException;
	public List<Project> getOtherProjectList(Set<Project> s) throws BaseException;
	public List<ParameterData> findByProjectIdAndType(String projectId, String type)  throws BaseException;
	public void deleteParaDataByProjectId(String projectId)throws BaseDaoException;
	public void saveParaData(List<ParameterData> pdList) throws BaseDaoException;
	public List<ParameterData> findParameterDataByProjectId(String projectId) throws BaseDaoException;
	public List<SprintCommonVo> getSprintByProjectName(String projectNameInRally)  throws BaseException, IOException;
	public List<Reportary> getReportaryByProjectId(String projectId) throws BaseException;
	public ProjectRallyQuix getProjectRallyQuixById(String rallyQuixId) throws BaseException;
	public List<ProjectRallyQuix>getProjectRallyByProjectId(String projectId) throws BaseException;
	public List<ProjectRallyQuix>getProjectRallyQuixByType(String type) throws BaseException;
	public List<ProjectRallyQuix>getProjectQuixByProjectId(String projectId) throws BaseException;
	public void doProjectAddRally(ProjectRallyQuix projectRallyQuix)throws BaseException;
	public void saveReportary(Reportary r) throws BaseException;
	public List<Reportary> getAllReportary() throws BaseException;
	public Reportary getReportaryByReportaryId(String reportaryId) throws BaseException;
	public void clearSyncedRepositoryData(String reportaryId)throws BaseException;
	public String getMaxSvnVersion(String reportaryId)throws BaseException;
	public void saveCommitReport(CommitReport cr)throws BaseException;
	public void saveCommitUSDEList(List<CommitusDefect> commitUSDEList)throws BaseException;
	public void saveCommitPath(List<CommitPath> cpList)throws BaseException;
	public List<DefectVo> getRallyDefectInfoByProjectModule(String projectName, String module) throws IOException;
	public List<UserstoryVo> getRallyUSInofoByPorject(String projectName) throws IOException;
	public List<DefectVo> getQuixDefectInfoByProjectModule(String projectName, String module) throws IOException;
	public List<DefectVo> getQuixForReport(String email, String startDate, String endDate, String projects) throws IOException;
	public List<MyCommitVo> getCommitVo(String email, String reportaryId)throws BaseException;
	public Boolean ifSvnRevisionExist(long revision, String reportaryId)throws BaseException;
	public String getDefaultPeriod(String reportaryId)throws BaseException;
	public List<String> getCommitYearList(String reportaryId)throws BaseException;
	public List<CodeReportVo>getAnnualReportList(List<String> yearList, String reportId)throws BaseException;
	public List<UserstoryInfo> getUSInfoByProjectName(String projectName) throws BaseException;
	public List<String> getProjectRallyQuixByUserId(Integer userId) throws BaseDaoException;
}
